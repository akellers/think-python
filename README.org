#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2023-01-07 Sat>
#+author: andreas
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.6)
#+cite_export:

* Introduction

This README serves as companion to the book "Think Python" [[file:~/Toolbox/Manuals/python/Think Python.pdf][PDF]].

It is written in Emacs Org mode which provides several means to play
with Python. Here a some basic commands using so called 'literal
programming' with Org mode:

- C-c C-x C-f :: Emphasize text
- C-c C-l :: Insert hyperlink
- C-c C-, :: Insert block structure, e.g. source blocks
- C-c C-c :: Execute source block
- C-c C-' :: Edit source example

For further information about Org mode, see [[file:~/Toolbox/Manuals/tools/Org Manual.pdf][Org Manual]].

* Chapter 1: The Way of a Program

** Exercise 1-1

#+BEGIN_SRC python :results output
  print("Hello World!")   # prints the string
  # print "Hello World!"  # syntax error
  # print(Hello World)    # syntax error
  2++2                    # no output
  print(2++2)             # prints 4
  # 02                    # leading zeros are not permittet
  # 2 3                   # invalid syntax
#+END_SRC

#+RESULTS:
: Hello World!
: 4

** Exercise 1-2

#+BEGIN_SRC python :results output
  print(42*60 + 60)
  print(10 / 1.61)
  s = 10         # in km
  t = 42*60 * 42 # in seconds
  # pace in miles per min
  pm = (s / 1.16) / (t / 60)
  print(pm)
  ph = pm * 60
  print(ph)
#+END_SRC

#+RESULTS:
: 2580
: 6.211180124223602
: 0.004887012276174838
: 0.29322073657049025

* Chapter 2: Variables, Expressions and Statements

** Exercise 2-1

#+BEGIN_SRC python :results output
  # 42 = n      # can't assign to literal
  x = y = 1     # assigns 1 to y and x
  print(x)
  print(y)
  x = y = 1;
  print(x)
  print(y)
#+END_SRC

#+RESULTS:
: 1
: 1
: 1
: 1

** Exercise 2-2

#+BEGIN_SRC python :results output
  import math
  r = 5
  V = 4/3 * math.pi * r ** 3
  s = "The volume of a sphere with radius %s is %g." % (r, V)
  print(s)

  price = 24.95
  discount = 0.4
  shipping_first = 3
  shipping_more = 0.75
  N = 60
  total = (60 * price)*(1 - discount) + shipping_first + (N - 1)*shipping_more
  s = "The total wholesale cost for %s copies is $%g." % (N, total)
  print(s)

  t1 = 6*60 + 52 # 6:52 am
  p1 = (8*60 + 15)/60 # 1 mile at pace 8:15 per mile
  p2 = (7*60 + 12)/60 # 3 miles at 7:12 per mile
  t2 = t1 + p1 * 1.0 + p2 * 3
  # s = "I'll return at %d:%d at home." % (t2 // 60, t2 % 60)
  s = "I'll return at %d:%d at home." % divmod(t2, 60)
  print(s)
#+END_SRC

#+RESULTS:
: The volume of a sphere with radius 5 is 523.599.
: The total wholesale cost for 60 copies is $945.45.
: I'll return at 7:21 at home.

* Chapter 3: Functions

** Exercise 3-1

   #+BEGIN_SRC python :results output
     def right_justify(s):
	 n = len(str(s))
	 print(" "*(70 - n) + str(s))

     right_justify('Monty')
     right_justify('Python!')
   #+END_SRC

   #+RESULTS:
   :                                                                  Monty
   :                                                                Python!

** Exercise 3-2

   #+BEGIN_SRC python :results output
     def do_twice(f, arg):
	 f(arg)
	 f(arg)

     def do_four(f, arg):
	 do_twice(f, arg)
	 do_twice(f, arg)

     def print_spam():
	 print('Spam')

     do_twice(print, 'Spam again')

     do_four(print, 'More spam')
   #+END_SRC

   #+RESULTS:
   : Spam again
   : Spam again
   : More spam
   : More spam
   : More spam
   : More spam

** Exercise 3-3

   #+BEGIN_SRC python :results output
     def grid1h(n):
	 s = ('+' + '-'*4)*n
	 print(s, '+')

     def grid1v(n):
	 s = ('|' + ' '*4)*n
	 print(s, '|')

     def do_twice(f, n):
	 f(n)
	 f(n)

     def do_four(f, n):
	 do_twice(f, n)
	 do_twice(f, n)

     def grid1b(n):
	 grid1h(n)
	 do_four(grid1v, n)

     # 2x2
     do_twice(grid1b, 2)
     grid1h(2)
     # 4x4
     # do_four(grid1b, 4)
     # grid1h(4)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   +----+---- +
   |    |     |
   |    |     |
   |    |     |
   |    |     |
   +----+---- +
   |    |     |
   |    |     |
   |    |     |
   |    |     |
   +----+---- +
   #+end_example

* Chapter 4: Case Study: Interface Design

  n/a due to missing turtle package

* Chapter 5: Conditionals and Recursion

** Exercise 5-1

   #+BEGIN_SRC python :results output
     import time

     sec = int(time.time())
     print("Seconds since Epoch: %d" % sec)
     min = sec // 60
     print("Minutes since Epoch: %d" % min)
     hrs = min // 60
     print("Hours since Epoch: %d" % hrs)
     day = hrs // 24
     print("Days since Epoch: %d" % day)
     yrs = day // 365
     print("Years since Epoch: %d" % yrs)

     print("Current Time: %02d:%02d:%02d" % ((1 + hrs % 24), (min % 60), (sec % 24)))
   #+END_SRC

   #+RESULTS:
   : Seconds since Epoch: 1676384770
   : Minutes since Epoch: 27939746
   : Hours since Epoch: 465662
   : Days since Epoch: 19402
   : Years since Epoch: 53
   : Current Time: 15:26:10

** Exercise 5-2

   The following code can not be exexcuted via =C-c C-c=. Run Python
   file [[file:src/exercise-5-2.py]] instead.

   #+BEGIN_SRC python
     def check(a, b, c, n):
	 if n > 2 and a^n + b^n == c^n:
	    print("Holy smokes, fermat was wrong!")
	 else:
	    print("No, that doesn't work.")

     n = int(input("n: "))
     a = int(input("a: "))
     b = int(input("b: "))
     c = int(input("c: "))

     check(a,b,c,n)
   #+END_SRC

   #+RESULTS:

** Exercise 5-3

   #+BEGIN_SRC python :results output
     def is_triangle(a, b, c):
	 if (a + b < c) or (a + c < b) or (b + c < a):
	     ret = "No"
	 else:
	     ret = "Yes"
	 return ret

     for a in range(3):
	 for b in range(3):
	     for c in range(3):
		 print("is_triangle(%d, %d, %d) = %s" % (a, b, c, is_triangle(a, b, c)))
   #+END_SRC

   #+RESULTS:
   #+begin_example
   is_triangle(0, 0, 0) = Yes
   is_triangle(0, 0, 1) = No
   is_triangle(0, 0, 2) = No
   is_triangle(0, 1, 0) = No
   is_triangle(0, 1, 1) = Yes
   is_triangle(0, 1, 2) = No
   is_triangle(0, 2, 0) = No
   is_triangle(0, 2, 1) = No
   is_triangle(0, 2, 2) = Yes
   is_triangle(1, 0, 0) = No
   is_triangle(1, 0, 1) = Yes
   is_triangle(1, 0, 2) = No
   is_triangle(1, 1, 0) = Yes
   is_triangle(1, 1, 1) = Yes
   is_triangle(1, 1, 2) = Yes
   is_triangle(1, 2, 0) = No
   is_triangle(1, 2, 1) = Yes
   is_triangle(1, 2, 2) = Yes
   is_triangle(2, 0, 0) = No
   is_triangle(2, 0, 1) = No
   is_triangle(2, 0, 2) = Yes
   is_triangle(2, 1, 0) = No
   is_triangle(2, 1, 1) = Yes
   is_triangle(2, 1, 2) = Yes
   is_triangle(2, 2, 0) = Yes
   is_triangle(2, 2, 1) = Yes
   is_triangle(2, 2, 2) = Yes
   #+end_example

** Exercise 5-4

   #+BEGIN_SRC python :results output
     def recurse(n, s):
	 if n == 0:
	     print(s)
	 else:
	     recurse(n-1, n+s)

     recurse(3, 0)

   #+END_SRC

   #+RESULTS:
   : 6

** Exercise 5-5

   Not applicable (requires module =turtle=)

** Exercise 5-6

   Not applicable (requires module =turtle=)
